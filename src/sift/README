
                  Program to detect SIFT features
                  -------------------------------
                    David Lowe (lowe@cs.ubc.ca)
                    Version 2.0, August 5, 2004


This directory contains a research implementation of the SIFT software
for invariant keypoint detection described in papers by David Lowe.
See the web page at http://www.cs.ubc.ca/~lowe/keypoints/ for
references to the latest papers.

This software is being made available for individual research use
only.  See the file LICENSE in this directory for conditions of use.

To compile the code in this directory under Linux or other Unix, do:
% make

Then, to detect keypoints on a provided test image, seminar.pgm, run:
% keypoints <seminar.pgm >test.key

This will output the keypoints in a simple ASCII file format that is
convenient to read by other programs.  The file format starts with 2
integers giving the total number of keypoints and the size of the
descriptor vector for each keypoint (128 by default). Then each
keypoint is specified by 4 floating point numbers giving subpixel row
and column location, scale, and orientation (in radians from -PI to
PI).  Then the descriptor vector for the keypoint is given as a list
of integers in range [0,255].

Keypoints from a new image can be matched to those from previous
images by simply looking for the descriptor vector with closest
Euclidean distance among all previous vectors.  See demo software
from the web site mentioned above for an example of how to perform
keypoint matching.


Display keypoints on image
--------------------------

You can display the keypoints superimposed on the input image by
using the "-display" command line option:
% keypoints -display <seminar.pgm >result.pgm

This will write out a new image, result.pgm, with arrows overlayed
indicating the locations, scales, and orientations of the keypoints.
You can inspect this image using the public domain program xv:
% xv result.pgm
or use any other tool that displays the common PGM image format.


Modifying parameters
--------------------

There are many parameters at the beginning of key.c that you may wish
to change.  Detailed comments are provided in key.c.  For example,
setting DoubleImSize to FALSE will produce about 4 times fewer
keypoints, eliminating those at the finest scales, and speed the
computation by a factor of 4.  The smaller number of keypoints is
usually still enough for tasks such as robot localization.


Licensing conditions
--------------------

This software is being made available for research purposes only.
Redistribution or commercial applications require a license from the
University of British Columbia.  See the file LICENSE in this
directory for conditions of use.
